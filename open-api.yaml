openapi: 3.0.3
info:
  title: Reviews for movies
  description: |-
    This is a sample to create, as a user reviews for movies
  termsOfService: NaN
  contact:
    email: ynov@ynov.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:3000/
tags:
  - name: Register
    description: Sign up as a new user
  - name: Login
    description: Log in as a user
  - name : Me
    description: User interface
  - name : Review
    description: User reviews
paths:
  /login/register:
    post:
      tags:
        - Register
      summary: Register as a new user
      description: Register as a new user
      operationId: addUser
      requestBody:
        description: Register as a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /login:
    post:
      tags:
        - Login
      summary: Register as a new user
      description: Register as a new user
      operationId: addUser
      requestBody:
        description: Register as a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /me/reviews:
    get:
      tags:
        - Me
      summary: Find all my reviews
      description: Returns all the reviews belonging to this user
      operationId: getAllReviews
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/User"
                type: array
                items:
                  $ref: '#/components/schemas/ReviewGet'
                example:
                  - reviewId: 1
                    movieTitle: Sherlock Holmes
                    rating: 2
                    description: Description
                  - reviewId: 2
                    movieTitle: Jumanji
                    rating: 5
                    description: non
                  - reviewId: 3
                    movieTitle: Star Wars
                    rating: 0
                    description: obligatoire
        '400':
          description: unsuccessful operation an error occurred
    post:
      tags:
        - Me
      summary: Add a new review to a movie
      operationId: addReviewToMovie
      requestBody:
        description: Create a new book in the lib
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'     
  /me/reviews/{reviewId}: 
    get:
      tags:
        - Me
      security: 
        - bearerAuth: []
      summary: Find review by reviewId
      description: Returns a single review
      operationId: getReviewById
      parameters:
        - name: reviewId
          in: path
          description: ID of review to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewGet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Review not found

    delete:
        tags:
          - Me
        summary: Deletes a review
        description: delete a review
        operationId: deleteReviewById
        parameters:
          - name: reviewId
            in: path
            description: Review id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Livre bien supprim√©
          '400':
            description: Invalid Book value
    put:
      tags:
        - Me
      summary: Update an existing review
      description: Update an existing review by Id
      operationId: updateReviewById
      requestBody:
        description: Update an existent review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewGet'
        required: true
      responses:
        '200':
          description: Successful operation 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewGet' 
        '400':
          description: Invalid ID supplied
        '404':
          description: Review not found
        '405':
          description: Validation exception
  /reviews/{userId}:
    get:
      tags:
        - Review
      summary: Find all the reviews belonging to userId
      description: Returns all the reviews belonging to userId
      operationId: getReviewsByUserId
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewGet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Review not found
  /reviews/{reviewId}/like:
    post:
      tags: 
        - Review
      summary: Add a like to a review
      operationId: addLike
      responses:
        "2XX":
          description: "Review liked"
        "4XX": 
          $ref: "#/components/responses/NotFound"
        "5XX": 
          $ref: "#/components/responses/InternalServerError"
        
  # /reviews/{reviewId}/dislike:
  #   post:

components:
  schemas:
    User:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          example: "Jason"
    UserRegister:
      allOf:
        - $ref: '#/components/schemas/User'
      required:
        - email
        - password
    ReviewGet:
      allOf:
        - properties:
            reviewId:
              type: integer
              example: 4
        - $ref: '#/components/schemas/Review'
      required:
        - reviewId
    Review:
      required:
        - movieName
        - rating
      properties:
        movieName:
          type: string
          example: Star wars
        rating:
          type: number
        comment:
          type: string
          example: Un commentaire incroyable ehh nan c jason
        like:
          type: integer
        description:
          type: string
          example: Une description incroyable ehh nan c jason
  responses: 
    NotFound:
      description: "The resource specified is not found"
      content:
        application/json:
          schema:
            type: object
            required: [success, message]
            properties:
              success:
                type: boolean
                default: false
                example: false
              message:
                type: string
                default: ""
                example: "This ressource with this id is not found"
    InternalServerError:
      description: "An internal server error occurred"
      content:
        application/json:
          schema:
            type: object
            required: [success, message]
            properties:
              success:
                type: boolean
                default: false
                example: false
              message:
                type: string
                default: "An unknown server error occurred"
                example: "An unknown server error occurred"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Jwt
      description: Set your Jwt token
