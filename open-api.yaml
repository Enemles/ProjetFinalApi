openapi: 3.0.3
info:
  title: Reviews for movies
  description: |-
    This is a sample to create, as a user reviews for movies
  termsOfService: NaN
  contact:
    email: ynov@ynov.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:3000/
tags:
  - name: User
    description: User Interface
  - name: Movies
    description: Movie Interface
  - name : Me
    description: Logged User interface
paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register as a new user
      description: Register as a new user
      operationId: addUser
      requestBody:
        description: Register as a new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
            example:
              - userId: Jeff64
                firstName: John
                lastName: John
                email: email@outlook.com
                password: MotDePasse 
        required: true
      responses:
        '201':
          description: Successful operation
  /login:
    post:
      tags:
        - Authentication
      summary: Login as a user
      description: login as a user
      operationId: addUser
      requestBody:
        description: Login as a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
            example:
              - userId: Jeff64
                password: MotDePasse 
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users:
    get:
      tags:
        - User
      summary: Find my informations
      description: Returns my informations
      operationId: getMe
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGet'
                example:
                  - userId: Jack31
                    email: email@outlook.com
                    firstName: 'Jack'
                    lastName: 'Doe'
        '400':
          description: unsuccessful operation an error occurred
  /users/all:
    get:
      tags:
        - User
      summary: Find all users
      description: Returns all the users
      operationId: getUsers
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGet'
                example:
                  - userId: 1
                    email: email@gmail.com
                    firstName: 'John'
                    lastName: 'Doe'
                  - userId: 2
                    email: email@hotmail.com
                    firstName: 'Jane'
                    lastName: 'Doe'
                  - userId: 3
                    email: email@outlook.com
                    firstName: 'Jack'
                    lastName: 'Doe'
        '400':
          description: unsuccessful operation an error occurred
  /users/{userId}:
    get:
      tags:
        - User
      summary: Find a user by id
      description: Returns a user by it's ID
      operationId: getUserById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserGet'
                example:
                  - userId: 1
                    email: email@gmail.com
                    firstName: 'John'
                    lastName: 'Doe'
        '400':
          description: unsuccessful operation an error occurred
  /users/{userId}/{reviewId}:
    get:
      tags:
        - User
      summary: Find a user by id of it's user
      description: Returns a review by id of it's user
      operationId: getReviewOnUserById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewGet'
                example:
                  - userId: 1
                    email: email@gmail.com
                    firstName: 'John'
                    lastName: 'Doe'
        '400':
          description: unsuccessful operation an error occurred
  /users/{userId}/reviews:
    get:
      tags:
        - User
      summary: Find all the reviews belonging to userId
      description: Returns all the reviews belonging to userId
      operationId: getReviewsByUserId
      parameters:
        - name: userId
          in: path
          description: ID of user to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewGet'
              example:
                - reviewId: 2
                  movieTitle: Jumanji
                  rating: 5
                  description: non
        '400':
          description: Invalid ID supplied
        '404':
          description: Review not found
  /users/{userId}/{reviewId}/like:
    post:
      tags: 
        - Review
      summary: Add a like to a review
      operationId: likeAReview
      responses:
        "2XX":
          description: "Review liked"
        "4XX": 
          $ref: "#/components/responses/NotFound"
        "5XX": 
          $ref: "#/components/responses/InternalServerError"   
  /users/{userId}/{reviewId}/dislike:
    post:
      tags: 
        - Review
      summary: Add a dislike to a review
      operationId: dislikeAReview
      responses:
        "2XX":
          description: "Review liked"
        "4XX": 
          $ref: "#/components/responses/NotFound"
        "5XX": 
          $ref: "#/components/responses/InternalServerError"   
  /me/reviews:
    get:
      tags:
        - Me
      summary: Find all my reviews
      description: Returns all the reviews belonging to this user
      operationId: getAllReviews
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewGet'
                example:
                  - reviewId: 1
                    movieTitle: Sherlock Holmes
                    rating: 2
                    description: Description
                  - reviewId: 2
                    movieTitle: Jumanji
                    rating: 5
                    description: non
                  - reviewId: 3
                    movieTitle: Star Wars
                    rating: 0
                    description: obligatoire
        '400':
          description: unsuccessful operation an error occurred
    post:
      tags:
        - Me
      summary: Add a new review to a movie
      description: Add a new review to a movie
      operationId: addReviewToMovie
      requestBody:
        description: Create a new book in the lib
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'     
  /me/reviews/{reviewId}: 
    get:
      tags:
        - Me
      security: 
        - bearerAuth: []
      summary: Find review by reviewId
      description: Returns a single review
      operationId: getReviewById
      parameters:
        - name: reviewId
          in: path
          description: ID of review to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewGet'
        '400':
          description: Invalid ID supplied
        '404':
          description: Review not found
    delete:
        tags:
          - Me
        summary: Deletes a review
        description: delete a review
        operationId: deleteReviewById
        parameters:
          - name: reviewId
            in: path
            description: Review id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Livre bien supprim√©
          '400':
            description: Invalid Book value
    put:
      tags:
        - Me
      summary: Update an existing review
      description: Update an existing review by Id
      operationId: updateReviewById
      requestBody:
        description: Update an existent review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewGet'
        required: true
      responses:
        '200':
          description: Successful operation 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewGet' 
        '400':
          description: Invalid ID supplied
        '404':
          description: Review not found
        '405':
          description: Validation exception
  /movies:
    get:
      tags:
        - Movies
      summary: Find all movies available
      description: Returns all the movies
      operationId: getMovies
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movies'
                example:
                  - movieName: Star wars
                    releaseDate: 12-12-2012
                    globalRating: 4
                  - movieName: Star wars 2
                    releaseDate: 12-12-2012
                    globalRating: 2
                  - movieName: Star wars 3
                    releaseDate: 12-12-2012
                    globalRating: 5
        '400':
          description: unsuccessful operation an error occurred
  /movies/{movieId}:
    get:
      tags:
        - Movies
      summary: Find movie by id
      description: Returns single movie by id
      operationId: getMovieById
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movies'
                example:
                  - movieName: Star wars
                    releaseDate: 12-12-2012
                    globalRating: 4
        '400':
          description: unsuccessful operation an error occurred
components:
  schemas:
    Movies:
      required:
        - movieName
        - releaseDate
        - globalRating
      properties:
        movieName:
          type: string
          example: Star wars
        releaseDate:
          type: string
          format: date
          example: 12-12-2012
        globalRating:
          type: integer
          example: 5
    User:
      required:
        - userId
      type: object
      properties:
        userId:
          type: string
          example: YannouJr
    UserRegister:
      allOf:
        - $ref: '#/components/schemas/User'
      required:
        - firstName
        - lastName
        - email
        - password
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        email:
          type: string
          example: johnDoe@gmail.com
        password:
          type: string
          example: MotDePasse
    UserGet:
      allOf:
        - $ref: '#/components/schemas/User'
      required:
        - email
        - firstName
        - lastName
    ReviewGet:
      allOf:
        - properties:
            reviewId:
              type: integer
              example: 4
        - $ref: '#/components/schemas/Review'
      required:
        - reviewId
    Review:
      required:
        - movieName
        - rating
      properties:
        movieName:
          type: string
          example: Star wars
        rating:
          type: integer
          example: 5
        description:
          type: string
          example: Une description incroyable ehh nan c jason
  responses: 
    NotFound:
      description: "The resource specified is not found"
      content:
        application/json:
          schema:
            type: object
            required: [success, message]
            properties:
              success:
                type: boolean
                default: false
                example: false
              message:
                type: string
                default: ""
                example: "This ressource with this id is not found"
    InternalServerError:
      description: "An internal server error occurred"
      content:
        application/json:
          schema:
            type: object
            required: [success, message]
            properties:
              success:
                type: boolean
                default: false
                example: false
              message:
                type: string
                default: "An unknown server error occurred"
                example: "An unknown server error occurred"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Jwt
      description: Set your Jwt token


