openapi: 3.0.3
info:
  title: Reviews for movies
  description: |-
    This is a sample to create, as a user reviews for movies
  termsOfService: NaN
  contact:
    email: ynov@ynov.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:3000
tags:
  - name: Authentication
    description: Register and login as a new user
  - name: User
    description: User interface
  - name: Review
    description: User reviews
paths:
  /login/register:
    post:
      tags:
        - Authentication
      summary: Register as a new user
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLogged"
        "400":
          description: unsuccessful operation an error occurred
  /login:
    post:
      tags:
        - Authentication
      summary: Login as a new user
      description: Login as a new user
      operationId: login
      requestBody:
        description: Login as a new user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserLogged"
        "400":
          description: unsuccessful operation an error occurred
  /user:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Show my profile
      operationId: getCurrentUser
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/User"
                type: array
                items:
                  $ref: "#/components/schemas/ReviewGet"
                example:
                  - reviewId: 1
                    reviewTitle: Big brain
                    movieName: Sherlock Holmes
                    rating: 2
                    comment: Le gars va trop vite, bonne réalisation
                    like: 9
                  - reviewId: 2
                    reviewTitle: The rock en feu
                    movieName: Jumanji
                    rating: 5
                    comment: Gros film pour les enfants
                    like: 3
                  - reviewId: 3
                    reviewTitle: Princesse leïa RIP mais le boulot...
                    movieName: Star Wars
                    rating: 10
                    comment: ça tire dans tous les sens
                    like: 4
        "400":
          description: unsuccessful operation an error occurred
    post:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Add a new review to a movie
      operationId: addReviewToMovie
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
        required: true
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        "400":
          description: unsuccessful operation an error occurred
    put:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Modify an element of our own profile
      operationId: modifyUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: unsuccessful operation an error occurred
  /user/all:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Show all users
      operationId: getUsers
      responses:
        "201":
          description: Successfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                $ref: "#/components/schemas/User"
        "400":
          description: unsuccessful operation an error occurred
  /user/{username}:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Show a user profile by his username
      operationId: getUserById
      parameters:
        - name: username
          in: path
          description: username of the seeked user
          schema:
            type: string
          required: true
      responses:
        "201":
          description: Successfull operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: unsuccessful operation an error occurred
    delete:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Delete a profile
      operationId: delUser
      parameters:
        - name: username
          in: path
          description: username of the deleted user
          schema:
            type: string
          required: true
      responses:
        "201":
          description: Successfull operation, user deleted
        "400":
          description: unsuccessful operation an error occurred
  /review/{reviewId}:
    get:
      tags:
        - Review
      security:
        - bearerAuth: []
      summary: Find review by reviewId
      operationId: getReviewById
      parameters:
        - name: reviewId
          in: path
          description: ID of review to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewGet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Review not found

    delete:
      tags:
        - Review
      security:
        - bearerAuth: []
      summary: Delete a review
      description: delete a review
      operationId: deleteReviewById
      parameters:
        - name: reviewId
          in: path
          description: Review id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Review bien supprimé
        "400":
          description: Invalid review value
    put:
      tags:
        - Review
      security:
        - bearerAuth: []
      summary: Update an existing review
      description: Update an existing review by Id
      operationId: updateReviewById
      parameters:
        - name: reviewId
          in: path
          description: Review id to delete
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Update an existent review
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewGet"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewGet"
        "400":
          description: Invalid ID supplied
        "404":
          description: Review not found
        "405":
          description: Validation exception
  /review/{reviewId}/like:
    put:
      tags:
        - Review
      security:
        - bearerAuth: []
      summary: Add a like to a review
      operationId: addLike
      parameters:
        - name: reviewId
          in: path
          description: ID of review to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "2XX":
          description: "Review liked"
        "4XX":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
  /review/{reviewId}/dislike:
    put:
      tags:
        - Review
      security:
        - bearerAuth: []
      summary: Add a dislike to a review
      operationId: addDisLike
      parameters:
        - name: reviewId
          in: path
          description: ID of review to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "2XX":
          description: "Review liked"
        "4XX":
          $ref: "#/components/responses/NotFound"
        "5XX":
          $ref: "#/components/responses/InternalServerError"
  /movies:
    get:
      tags:
        - Movies
      security:
        - bearerAuth: []
      summary: Show all movies concerned by a review on the site
      operationId: getMovies
      responses:
        "201":
          description: All movies
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Movies"
        "4XX":
          description: unsuccessful operation an error occurred

components:
  schemas:
    User:
      required:
        - username
        - mail
        - firstname
        - lastname
      type: object
      properties:
        username:
          type: string
          example: JasonDerulo98
        mail:
          type: string
          example: jasonderulo@gmail.com
        firstname:
          type: string
          example: Jason
        lastname:
          type: string
          example: Derulo
    UserRegister:
      allOf:
        - $ref: "#/components/schemas/User"
      required:
        - password
      type: object
      properties:
        password:
          type: string
          example: jasonLeGazon
    UserLogin:
      required:
        - username
        - password
      type: object
      properties:
        username:
          type: string
          example: JasonDerulo98
        password:
          type: string
          example: jasonLeGazon
    UserLogged:
      allOf:
        - $ref: "#/components/schemas/User"
      required:
        - token
      type: object
      properties:
        token:
          type: string
          example: jeSuisUnToken
    ReviewGet:
      allOf:
        - properties:
            reviewId:
              type: integer
              example: 4
        - $ref: "#/components/schemas/Review"
      required:
        - reviewId
    Review:
      required:
        - reviewTitle
        - movieName
        - rating
        - comment
        - like
      properties:
        reviewTitle:
          type: string
          example: I *** loved this shit
        movieName:
          type: string
          example: Star wars
        rating:
          type: number
        comment:
          type: string
          example: Un commentaire incroyable ehh nan c jason
        like:
          type: integer
          example: 5
    Movies:
      required:
        - moviename
        - releasedate
        - globalrating
      properties:
        moviename:
          type: string
          example: Attrape moi si tu peux
        releasedate:
          type: string
          example: 24/02/2002
        globalrating:
          type: number
          example: 7,4
  responses:
    NotFound:
      description: "The resource specified is not found"
      content:
        application/json:
          schema:
            type: object
            required: [success, message]
            properties:
              success:
                type: boolean
                default: false
                example: false
              message:
                type: string
                default: ""
                example: "This ressource with this id is not found"
    InternalServerError:
      description: "An internal server error occurred"
      content:
        application/json:
          schema:
            type: object
            required: [success, message]
            properties:
              success:
                type: boolean
                default: false
                example: false
              message:
                type: string
                default: "An unknown server error occurred"
                example: "An unknown server error occurred"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Jwt
      description: Set your Jwt token
