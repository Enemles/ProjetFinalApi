openapi: 3.0.3
info:
  title: GetBooks reviews or users
  description: |-
    This is a sample to return books reviews or users from a library
  termsOfService: NaN
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:3000/
tags:
  - name: books
    description: Interact with books
  - name: meteo
    description: Interact with meteo
paths:
  /books:
    get:
      tags:
        - books
      summary: Find all my books
      description: Returns all the books
      operationId: getBooks
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
                example:
                  - id: 1
                    title: Sherlock Holmes
                    date: 2020-05-12
                  - id: 2
                    title: Jumanji
                    date: 2020-05-12
                  - id: 2
                    title: Attaque de boulettes géantes
                    date: 2020-05-12
        '400':
          description: unsuccessful operation an error occurred
    post:
      tags:
        - books
      summary: Add a new book to the lib
      description: Add a new book to the lib
      operationId: addBook
      requestBody:
        description: Create a new book in the lib
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
  /books/{bookId}:
    get:
      tags:
        - books
      summary: Find book by ID
      description: Returns a single book
      operationId: getBookById
      parameters:
        - name: bookId
          in: path
          description: ID of book to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
    delete:
        tags:
          - books
        summary: Deletes a book
        description: delete a book
        operationId: deleteBookById
        parameters:
          - name: bookId
            in: path
            description: Book id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Livre bien supprimé
          '400':
            description: Invalid Book value
  /meteo:
    get:
      tags:
        - meteo
      description: Returns external api
      responses:
        '200':
          description: successful operation
        '400':
          description: unsuccessful operation an error occurred
components:
  schemas:
    Book:
      required:
        - id
        - title
        - date
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 5
        title:
          type: string
          example: Cars
        date:
          type: string
          format: date
          example: 2020-05-12
  requestBodies:
    Book:
      description: Book object that needs to be added to the lib
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
